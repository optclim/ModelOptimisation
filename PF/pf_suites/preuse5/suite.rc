#!jinja2

{% if (CICE_ROW/NEMO_JPROC)|round(0,'ceil') == (CICE_ROW/NEMO_JPROC) %}
[WARNING: There is a known bug when using CICE number of rows that is exactly divisible by the NEMO number of processors North-South. Change your NEMO number of processors North-South.]
{% endif %}

{% macro format_final(run_periods, fmt='PT1S') -%}
    {%- set ENDYR = '+P%dY'%(run_periods[0]) if run_periods[0] > 0 else '' -%}
    {%- set ENDMO = '+P%dM'%(run_periods[1]) if run_periods[1] > 0 else '' -%}
    {%- set ENDDA = '+P%dD'%(run_periods[2]) if run_periods[2] > 0 else '' -%}
    {%- set ENDHR = '+PT%dH'%(run_periods[3]) if run_periods[3] > 0 else '' -%}
    {%- set ENDMI = '+PT%dM'%(run_periods[4]) if run_periods[4] > 0 else '' -%}
    {{ENDYR}}{{ENDMO}}{{ENDDA}}{{ENDHR}}{{ENDMI}}-{{fmt}}
{%- endmacro %}

{% if BASIS[0] == 0 %}
  {% set CYCLE_INIT = '00000101' %}
{% else %}
  {% set CYCLE_INIT = '%04d%02d%02dT%02d%02d' % (BASIS[0],BASIS[1],BASIS[2],BASIS[3],BASIS[4]) %}
{% endif %}
{% set FMT = 'P' + ('T' if CYCLE == 'm' or CYCLE == 'H' else '') + RESUB|string + CYCLE|upper %}

# start of suite tests cycling declarations
{% if TEST_RESTART %}
  {% set CYCLE_CRUN = 'P' + ('T' if CYCLE_TEST == 'm' or CYCLE_TEST == 'H' else '') + RESUB_TEST|string + CYCLE_TEST|upper %}
  {% set CYCLE_NRUN = CYCLE_CRUN %}
  {% set RESUB_LRUN = RESUB_TEST*2|int %}
  {% set CYCLE_LRUN = 'P' + ('T' if CYCLE_TEST == 'm' or CYCLE_TEST == 'H' else '') + RESUB_LRUN|string + CYCLE_TEST|upper %}
{% endif %}

{% if TEST_PE_DECOMP %}
  {% set CYCLE_PED = 'P' + ('T' if CYCLE_TEST == 'm' or CYCLE_TEST == 'H' else '') + RESUB_TEST|string + CYCLE_TEST|upper %}
{% endif %}

{% if TEST_RIGOROUS_COMPILE %}
  {% set CYCLE_RIG = 'P' + ('T' if CYCLE_TEST == 'm' or CYCLE_TEST == 'H' else '') + RESUB_TEST|string + CYCLE_TEST|upper %}
{% endif %}
# end of suite tests cycling declarations

{# Set default task run command to optionally use site specific opt configs #}
{% set TASK_RUN_COMMAND = 'rose task-run --verbose' %}

{% set OMPTHR_ATM = OMPTHR_ATM if OMPTHR_ATM is defined else 1 %}
{% set HYPERTHREADS = 2 if (LAHYPER is defined and LAHYPER) else 1 %}
{% if LOHYPER is defined and LOHYPER %}
  {% set OHYPERTHREADS = 2 %}
  {% set OMPTHR_OCN = 1 %}
{% else %}
  {% set OHYPERTHREADS = 1 %}
  {% set OMPTHR_OCN = 1 %}
{% endif %}
{% set IOS_NPROC = IOS_NPROC if IOS_NPROC is defined else 0 %}
{% if not NEMO_LAND_SUPPRESS %}
  {% set NEMO_NPROC = NEMO_IPROC*NEMO_JPROC %}
{% endif %}
{% set ANCIL_OPT_KEYS = ANCIL_OPT_KEYS if ANCIL_OPT_KEYS is defined else '' %}
{% set UM_OPT_KEYS = UM_OPT_KEYS if UM_OPT_KEYS is defined else '' %}
{% set BITCOMP_NRUN_OPT = 'bitcomp' if BITCOMP_NRUN else '' %}

{% set PLOT_LOAD_BALANCE = PLOT_LOAD_BALANCE if PLOT_LOAD_BALANCE is defined else false %}
{% set PLOT_LOAD_BALANCE = false if not RUN else PLOT_LOAD_BALANCE %}

{% set VERIFY_METRICS = VERIFY_METRICS if VERIFY_METRICS is defined else false %}
{% set VERIFY_METRICS = false if not RUN else VERIFY_METRICS %}

{# Test to determine when to use single fcm_make_um task #}
{% set SINGLE_FCMUM = ['meto_cray', 'MONSooN'] %}
{% if SITE in SINGLE_FCMUM %}
  {% set FCMUM_GRAPH = 'fcm_make_um' %}
  {% set FCMUM_LAST = 'fcm_make_um' %}
{% else %}
  {% set FCMUM_GRAPH = 'fcm_make_um => fcm_make2_um' %}
  {% set FCMUM_LAST = 'fcm_make2_um' %}
{% endif %}

{# Generate CICE block sizes #}
{% if AUTO_CALC_BLOCKS %}
  {% set CICE_BLKX = (CICE_COL/NEMO_IPROC)|round(0,'ceil') %}
  {% set CICE_BLKY = (CICE_ROW/NEMO_JPROC)|round(0,'ceil') %}
{% endif %}

{% set ATMOS_SECONDS_PER_TIMESTEP= 86400 / ATMOS_TIMESTEPS_PER_DAY |int%}
{% set OCEAN_SEAICE_SECONDS_PER_TIMESTEP= 86400 / OCEAN_SEAICE_TIMESTEPS_PER_DAY |int%}

[cylc]
    UTC mode = True
    [[events]]
        timeout handler = "rose suite-hook --mail --shutdown"
        timeout = P3D
        
[scheduling]
    cycling mode        = {{CALENDAR}}
    initial cycle point = {{CYCLE_INIT}}
    final cycle point   = {{ format_final(RUNLEN, FMT) if RUN else CYCLE_INIT }}
    max active cycle points = 3
    [[dependencies]]
        [[[ R1 ]]]
            graph = """
{% if POSTPROC %}
  {{ 'fcm_make_pp => fcm_make2_pp' + (' => POSTPROC_GROUP' if RUN else '')}}
{% endif %}
{{ 'fcm_make_ocean => fcm_make2_ocean' + (' => recon' if RECON else ' => coupled' if RUN else '') if BUILD_OCEAN else '' }}
{{ FCMUM_GRAPH + (' => recon' if RECON else ' => coupled' if RUN else '') if BUILD_UM else '' }}
{{ 'pf_reuse' + (' => recon' if RECON else ' => coupled => pf_postrun' if RUN else '') if PF_REUSE_BUILD else '' }}
{{ 'fcm_make_drivers => fcm_make2_drivers' + (' coupled' if RUN else '') if BUILD_DRIVERS else '' }}
{{ 'install_ancil => recon ' if RECON else ('install_ancil => coupled' if RUN else '')}}
{% if RUN %}
  {{ 'recon => coupled' if RECON else '' }}
  {{ 'clearout => coupled' if CLEAROUT else '' }}
  {{ 'coupled => plot_loadbalance' if PLOT_LOAD_BALANCE else '' }}
  {{ 'coupled => test_cpmip_norms' if VERIFY_METRICS else '' }}
{% endif %}
"""


        [[[ {{FMT}} ]]]
            graph = """
{% if RUN %}
pf_postrun[-{{FMT}}] => coupled => pf_postrun {{ '=> \\' if POSTPROC or HOUSEKEEP else '' }}
  {% if POSTPROC %}
POSTPROC_GROUP{{ ':succeed-all => \\' if PPTRANSFER or HOUSEKEEP else '' }}
    {% if PPTRANSFER %}
pptransfer {{'=> \\' if HOUSEKEEP else '' }}
    {% endif %}
  {% endif %}
  {% if HOUSEKEEP %}
housekeeping
  {% endif %}

  {% if POSTPROC %}
    {% if SPLIT_PP %}
postproc_atmos[-{{FMT}}] => postproc_atmos
postproc_cice[-{{FMT}}] => postproc_cice
postproc_nemo[-{{FMT}}] => postproc_nemo
    {% else %}
postproc[-{{FMT}}] => postproc
    {% endif %}
    {% if PPTRANSFER %}
pptransfer[-{{FMT}}] => pptransfer
    {% endif %}
  {% endif %}
{% endif %}

"""

{% if ARCHIVE_INTEGRITY and POSTPROC %}
        [[[ {{RESUB_ARCHIVE_INTEGRITY}} ]]]
            graph = """
POSTPROC_GROUP:succeed-all => archive_integrity
"""

        [[[ +{{FMT}}/{{RESUB_ARCHIVE_INTEGRITY}} ]]]
            graph = """
archive_integrity[-{{FMT}}] => POSTPROC_GROUP
"""

        [[[ R1/{{FMT}} ]]]
            # Final cycle
            graph = """
POSTPROC_GROUP:succeed-all => archive_integrity
"""
{% endif %}


{% include 'tests-graph.rc' %}
{% include 'ukesm-graph.rc' %}

[runtime]
    [[root]]
        script = {{TASK_RUN_COMMAND}}
        env-script = "eval $(rose task-env)"
        [[[environment]]]
            MODELBASIS = '{{ BASIS | join(',') }}'
            lcal360    = {{'.true.' if CALENDAR == '360day' else '.false.'}}
            
            # Set up the runid which controls the first five characters of the output filenames.
            # This can either be the final five characters of the suite id or RUNID_USR as set
            # by the user.
            {% if RUNID %}
               RUNID = `echo -n $CYLC_SUITE_NAME | cut -d - -f 2 | cut -c 1-5`
            {% else %}
               RUNID = {{ RUNID_USR }}
            {% endif %}
            ARCHIVE_SET = $( echo -n $CYLC_SUITE_NAME | cut -c 1-7 )
            DATAM      = $CYLC_SUITE_SHARE_DIR/data/{{DATAM}}
            NEMO_DATA  = $CYLC_SUITE_SHARE_DIR/data/{{NEMO_RST}}
            CICE_DATA  = $CYLC_SUITE_SHARE_DIR/data/{{CICE_RST}}
            CICE_COL   = {{CICE_COL}}
            CICE_ROW   = {{CICE_ROW}}
            CICE_BLKX  = {{CICE_BLKX}}
            CICE_BLKY  = {{CICE_BLKY}}
            CICE_MAXBK = {{CICE_MAXBK}}
            UMVN = 11.3
            PF_RUNDIR = {{PF_RUNDIR}}                  
            PF_REUSE_SHARE = {{PF_REUSE_SHARE}}                  
        [[[events]]]
            # All events now handled by cylc. Uncomment one or more of the below
            # if you want to move away from the default values:
            # mail events = submission retry, submission failed, submission timeout, retry, failed, timeout
            # submission timeout = P1D
            # execution timeout  = PT3H

{# ************ INHERITED NAMESPACES *************** #}

    [[ATMOS_TIMESTEPS]]
        [[[environment]]]
            ATMOS_TIMESTEPS_PER_DAY = {{ATMOS_TIMESTEPS_PER_DAY}}
            ATMOS_SECONDS_PER_TIMESTEP = {{ATMOS_SECONDS_PER_TIMESTEP}}

    [[OCEAN_SEAICE_TIMESTEPS]]
        [[[environment]]]
            OCEAN_SEAICE_TIMESTEPS_PER_DAY = {{OCEAN_SEAICE_TIMESTEPS_PER_DAY}}
            OCEAN_SEAICE_SECONDS_PER_TIMESTEP = {{OCEAN_SEAICE_SECONDS_PER_TIMESTEP}}

    [[ATMOS]]
        inherit = ATMOS_TIMESTEPS
        [[[environment]]]
            ATMOS_EXEC = $CYLC_SUITE_SHARE_DIR/fcm_make_um/build-atmos/bin/um-atmos.exe
            UM_ATM_NPROCX      = {{ATM_PROCX}}
            UM_ATM_NPROCY      = {{ATM_PROCY}}
            {% set UM_ATM_NPROC = ATM_PROCX * ATM_PROCY + IOS_NPROC %}
            FLUME_IOS_NPROC    = {{IOS_NPROC}}
            TASKEND            = $( rose date $CYLC_SUITE_INITIAL_CYCLE_POINT $CYLC_TASK_CYCLE_POINT --calendar {{CALENDAR}} --offset2 {{FMT}} --print-format y,m,d,h,M,s )

    [[NEMO]]
        inherit = NEMO_RESOURCE, OCEAN_SEAICE_TIMESTEPS
        [[[environment]]]
            OCEAN_EXEC=$CYLC_SUITE_SHARE_DIR/fcm_make_ocean/build-ocean/bin/nemo-cice.exe
            NEMO_IPROC       = {{NEMO_IPROC}}
            NEMO_JPROC       = {{NEMO_JPROC}}
            NEMO_NPROC       = {{NEMO_NPROC}}
            NEMO_VERSION     = 306
            NEMO_RST         = $NEMO_DATA
            TASKSTART        = $( rose date $CYLC_TASK_CYCLE_POINT --print-format %Y,%m,%d,%H,%M )
            TASKLENGTH       = $( rose date $CYLC_TASK_CYCLE_POINT $CYLC_TASK_CYCLE_POINT --calendar {{CALENDAR}} --offset2 {{FMT}} -f y,m,d,h,M,s )
            XIOS_NPROC       = {{XIOS_NPROC}}

    [[CICE]]
        [[[environment]]]
            CICE_NPROC = {{NEMO_NPROC}}
            CICE_RST   = $CICE_DATA
            
    [[POSTPROC]]
        inherit = None, POSTPROC_RESOURCE
        [[[environment]]]
            ROSE_TASK_APP = postproc
            CYCLEPERIOD = {{FMT}}
            MOOPROJECT = 
            
    [[POSTPROC_GROUP]]
         {# This is only used to group together the post processing tasks so that the graph is easier #}

{# ************* TASKS IN THE ORDER THEY ARE RUN *************** #}
    [[FCM_MAKE]]

{% if SITE in SINGLE_FCMUM %}
    [[fcm_make_um]]
        inherit = None, UMBUILD, UMBUILD_RESOURCE, FCM_MAKE
        [[[environment]]]
            FCM_MAKE_FILE = main
            OPTIM_LEVEL=safe
{% else %}
    [[fcm_make_um]]
        inherit = UMBUILD, EXTRACT_RESOURCE, FCM_MAKE
        [[[environment]]]
            FCM_MAKE_FILE = slash
            OPTIM_LEVEL=safe
    [[fcm_make2_um]]
        inherit = UMBUILD, UMBUILD_RESOURCE, FCM_MAKE
        [[[environment]]]
            FCM_MAKE_FILE = slash
            OPTIM_LEVEL=safe
{% endif %}
        
    [[fcm_make_ocean]]
        inherit = None, OCEANBUILD, FCM_MAKE
        [[[environment]]]
            OPTIM_LEVEL=high

    [[fcm_make2_ocean]]
        inherit = None, OCEANBUILD_RESOURCE, FCM_MAKE
        [[[environment]]]
            OPTIM_LEVEL=high        
    [[fcm_make_drivers]]
        inherit = None, EXTRACT_RESOURCE, FCM_MAKE

    [[fcm_make2_drivers]]
        inherit = None, DRIVERS_BUILD_RESOURCE, FCM_MAKE
        
    [[fcm_make_pp]]
        inherit = None, EXTRACT_RESOURCE, FCM_MAKE

    [[fcm_make2_pp]]
        inherit = None, PPBUILD_RESOURCE, FCM_MAKE

    [[install_ancil]]
        inherit = None, INSTALL_ANCIL_RESOURCE
        [[[environment]]]
            ROSE_APP_OPT_CONF_KEYS = {{ANCIL_OPT_KEYS}}
            
    [[clearout]]
        inherit = None, CLEAROUT_RESOURCE
        script = clearout.sh           

    [[RECON]]
        inherit = None, RCF_RESOURCE
        script = ". $ROSE_DATA/etc/um_ancils_gl; . $ROSE_DATA/etc/nemo_ancils_gl; {{TASK_RUN_COMMAND}}"
        [[[environment]]]
            ROSE_TASK_APP    = coupled
            OMP_NUM_THREADS  = 1
            RCF_NPROCX       = {{RCF_PROCX}}
            RCF_NPROCY       = {{RCF_PROCY}}
            TASKEND          = $MODELBASIS
            NEMO_NPROC       = 0    

    [[recon]]
        inherit = None, RECON, ATMOS_TIMESTEPS, OCEAN_SEAICE_TIMESTEPS
        
        
    [[COUPLED_TEST]]
    
    [[COUPLED]]
        inherit = None, ATMOS, NEMO, CICE, COUPLE_RESOURCE, UM_RESOURCE
        script = ". $ROSE_DATA/etc/um_ancils_gl; . $ROSE_DATA/etc/nemo_ancils_gl; {{TASK_RUN_COMMAND}}"
        [[[environment]]]
            ROSE_TASK_APP          = coupled
            CPMIP_ANALYSIS = {{CPMIP_ANALYSIS}}
            CALENDAR = {{CALENDAR}}
            CONTINUE               = $( if [[ $CYLC_TASK_CYCLE_POINT == $CYLC_SUITE_INITIAL_CYCLE_POINT ]]; then echo ""; else echo "true"; fi )
            ROSE_APP_OPT_CONF_KEYS = {{UM_OPT_KEYS}} {{BITCOMP_NRUN_OPT}}
            CPMIP_ANALYSIS         = {{CPMIP_ANALYSIS}}
            {% if CPMIP_ANALYSIS %}
	        CYCLE = {{CYCLE}}
                RESUB = {{RESUB}}
                COMPLEXITY = {{COMPLEXITY}}
                TOTAL_POWER_CONSUMPTION = {{TOTAL_POWER_CONSUMPTION}}
                NODES_IN_HPC = {{NODES_IN_HPC}}
	        IO_COST = {{IO_COST}}
                DATA_INTENSITY = {{DATA_INTENSITY}}
            {% endif %} 

    [[coupled]]
        inherit = None, COUPLED, COUPLED_TEST
        
           

{% include 'tests-runtime.rc' %}

{% if POSTPROC %}
  {% if SPLIT_PP %}

    [[postproc_atmos]]
        inherit = None, POSTPROC_GROUP, POSTPROC

    [[postproc_nemo]]
        inherit = None, POSTPROC_GROUP, POSTPROC

    [[postproc_cice]]
        inherit = None, POSTPROC_GROUP, POSTPROC
        
  {% else %}

    [[postproc]]
        inherit = None, POSTPROC_GROUP, POSTPROC

  {% endif %}       

  {% if PPTRANSFER %}

   [[fcm_make_pptransfer]]
        inherit = None, EXTRACT_RESOURCE
        [[[environment]]]
            ROSE_TASK_APP = fcm_make_pp

    [[fcm_make2_pptransfer]]
        inherit = None, PPTRANSFER_RESOURCE
        [[[environment]]]
            ROSE_TASK_APP = fcm_make_pp

    [[pptransfer]]
        inherit = None, PPTRANSFER_RESOURCE
        [[[environment]]]
            CYCLEPERIOD = {{FMT}}
            ROSE_TASK_APP = postproc

  {% endif %}
{% endif %} 

{% if PLOT_LOAD_BALANCE %}

    [[plot_loadbalance]]
        inherit = None, PLOT_LOADBALANCE_RESOURCE
        [[[environment]]]
            ROSE_TASK_APP = plot_loadbalance

{% endif %}

{% if VERIFY_METRICS %}

    [[test_cpmip_norms]]
        inherit = None, TEST_CPMIP_NORMS_RESOURCE
        [[[environment]]]
            ROSE_TASK_APP = test_cpmip_norms

{% endif %}
        
    [[archive_integrity]]
        inherit = None, POSTPROC
        script = "{{TASK_RUN_COMMAND}} --command-key=verify"
        [[[environment]]]
            ROSE_TASK_APP = postproc
        [[[events]]]
            mail events = failed, execution timeout

    [[pf_reuse]]
        inherit = None, HPC_SERIAL
        script = """
             echo prerun RUNDIR  {{PF_RUNDIR}}
             ln -s $(dirname $CYLC_SUITE_SHARE_DIR) {{PF_RUNDIR}}/cylc_link
             echo "here copy {{PF_REUSE_SHARE}} "
             echo CYLC_SUITE_SHARE_DIR $CYLC_SUITE_SHARE_DIR
             ls -l $CYLC_SUITE_SHARE_DIR
             echo rsync -rt {{PF_REUSE_SHARE}}/fcm_make_um  $CYLC_SUITE_SHARE_DIR
             rsync -rt {{PF_REUSE_SHARE}}/fcm_make_um  $CYLC_SUITE_SHARE_DIR
             echo rsync -rt {{PF_REUSE_SHARE}}/fcm_make_ocean  $CYLC_SUITE_SHARE_DIR
             rsync -rt {{PF_REUSE_SHARE}}/fcm_make_ocean  $CYLC_SUITE_SHARE_DIR
             echo rsync -rt {{PF_REUSE_SHARE}}/fcm_make_drivers  $CYLC_SUITE_SHARE_DIR
             rsync -rt {{PF_REUSE_SHARE}}/fcm_make_drivers  $CYLC_SUITE_SHARE_DIR
             touch {{PF_RUNDIR}}/REUSING.EXES
        """
        [[[job]]]
            execution time limit = PT10M

    [[pf_postrun]]
        inherit = None, HPC_SERIAL
        script = """
             {{PF_POSTRUN}} {{PF_RUNDIR}} 
                  # insert check if the postrun analysis found data to work on
                  # touch status.FAILED if not.
                  # expect this to generate csv or json according to what the 
                  # filtering needs.
             echo touch {{PF_RUNDIR}}/status.DONE
             touch {{PF_RUNDIR}}/status.DONE
         """
        [[[job]]]
            execution time limit = PT10M

    [[housekeeping]]
    inherit = None, HOUSEKEEP_RESOURCE



{% include 'site/'+SITE+'.rc' %}
{% include 'ukesm-runtime.rc' %}
