{
    "history": "Example JSON file for DFOLS tests. Copy and adjust for your needs and update the history",
    "svnInfo": "Revision: $Revision$ URL: $URL: https://svn.ecdf.ed.ac.uk/repo/geos/OptClim/trunk/Configurations/example.json $ Date: $Date$",
    "svnInfo_comment": "Information automatically updated by SVN -- please don't edit",
    "Developer_comment": "StudyConfig.py provides methods that work with this configuration file. Remember to change them if you change structure of this.",
    "version": 2,
    "version_comment": "Version ID",
    "Name": "Exampdfols",
    "Name_comment": "Study Name",
    "baseRunID": "zd",
    "baseRunID_comment": "base for runID. Only first two characters are generally used.",
    "runTime": null,
    "runTime_comment": "Time in seconds for run. If null then default value will be used.",
    "runCode": null,
    "runCode_comment": "Project coce to run job under.",
    "runUpgrade_vn3": "For vn3 put all runXXX stuff in a runInfo block.",
    "machineName": "slurm",
    "machineName_comment": "Name of machine to submit runs to",
    "modelName": "MITgcm",
    "modelName_comment": "Name of model that is ran",
    "Parameters": {
        "comment": "Information relevant to parameters.",
        "defaultParams": {
            "comment": "Default parameter values for HadAM3. null values or not set mean don't modify. Checked against wiki 11/5/17 ",
            "gravity": 9.81,
            "SEAICE_STRENGTH": 21000.0
        },
        "initParams": {
            "comment": "Intial values for parameters to be optimised. Set to null to use default values. Values below very close to std - 0 min, 1 max values",
            "gravity": 0,
            "SEAICE_STRENGTH": 1
        },
        "initScale": true,
        "initScale_comment": "If true then startParams range from 0 to 1 where 0 means min value; 1 max value.",
        "fixedParams": {
            "comment": " List of parameters and values that are fixed and not modified in optimisation. Set to null to use default values"
        },
        "fixedScale": false,
        "fixedScale_comment": "If true then scalable fixedParams range from 0 to 1 where 0 means min value; 1 max value.",
        "minmax": {
            "comment": "Defines the minimum and maximmum ranges for the parameters. Must be defined for ALL parameters used in GN optimisation,",
            "gravity": [
                9.5,
                10.5
            ],
            "SEAICE_STRENGTH": [
                20000.0,
                25000.0
            ]
        },
        "steps": {
            "comment": "Steps for perturbations -- norm around 10% of the range. If not specified 10% will be used. Values below have been somewhat tuned.",
            "gravity": 0.1,
            "SEAICE_STRENGTH": 500.0
        },
        "optimumParams": {
            "gravity": 10.442492235949961,
            "SEAICE_STRENGTH": 24100.0
        }
    },
    "study": {
        "comment": "Parameters that specify the study. Used by framework and not by optimisation routines",
        "referenceModelDirectory": "/work/n02/shared/mjmn02/OptClim/optclim3/base/ecco/base1",
        "referenceModelDirectory_comment": "Directory where reference model configuration exists. ",
        "covariance": {
            "comment": "Covariance matrices and operations on them. If CovObsErr and CovIntVar are *both* specified then CovTotal will be computed from them",
            "CovTotal": null,
            "CovTotal_Comment": "Name of file containing Covariance Matrix for total Error.",
            "CovTotalDiagonalise": false,
            "CovTotalDiagonalise_comment": "If true diagonalise the total covariance matrix",
            "CovIntVar": null,
            "CovIntVar_Comment": "Name of file containing Covariance Matrix of Internal Variability",
            "CovIntVarDiagonalise": false,
            "CovIntVarDiagonalise_comment": "If true diagonalise the internal variability covariance matrix",
            "CovObsErr": null,
            "CovObsErr_Comment": "Name of file containing Covariance Matrix for Observational Error ",
            "CovObsErrDiagonalise": false,
            "CovObsErrDiagonalise_comment": "If true diagonalise the Observational Error covariance matrix"
        },
        "ObsList": [
            "dynstat_theta_mean",
            "dynstat_salt_mean",
            "seaice_area_mean"
        ],
        "ObsList_comment": "List of Observations that Algorithm uses which should be generated by post processing of model",
        "constraintName": "netflux_global",
        "constraintName_comment": "Name of constraint variable -- target value defined by targets/constraintName. "
    },
    "optimise": {
        "comment": "Parameters to control optimisation. This is used within DFOLS optimisation routines AND not by framework",
        "algorithm": "DFOLS",
        "algorithm_comment": "Algorithm wanted Currently one of DFOLS or GAUSSNEWTON.",
        "mu": null,
        "mu_comment": "The inverse weighting given to the constraint -- it gets wt 1/(2mu). If Null then no constraint should be applied",
        "dfols": {
            "interpolation.throw_error_on_nans": false,
            "growing.ndirs_initial": null,
            "growing.ndirs_initial_comment": "the number of perturbations on first iteration. If not specified then will make Nparm perturbtions",
            "rhobeg": 0.18,
            "rhobeg_comment": "Radius of parameter trust region at start",
            "rhoend": 0.1,
            "rhoend_comment": "Radius of paramter trust region for termination (for our purpose this is in normalised parameters)",
            "maxfun": 10,
            "maxfun_comment": "Maximum number of model evaluations to be done. Default is O(1000). 15/19 reduced to 90 so have data to do a mid-point look at  ",
            "scaling_within_bounds": true,
            "scaling_within_bounds_comment": "Scale internally so all in range 0 to 1",
            "namedSettings": {
                "logging.save_poisedness": false,
                "logging.save_poisedness_comment": "whether or not  to calculate geometry statistics as part of diagnostic information",
                "init.random_initial_directions": true,
                "init.random_initial_directions_comment": "If true perturb in random directions. If true perturb along co-ordinate axis.",
                "init.run_in_parallel": true,
                "init.run_in_parallel_comment": "Run initial cases in parallel",
                "noise.additive_noise_level": 21.0,
                "noise.additive_noise_level_comment": "Estimate of noise in cost function. Used in termination -- nb cost fn is sum of squares **not** sum of squares/nObs. Note corrected 9/5/19 after d1061 had started. ",
                "logging.save_diagnostic_info": true,
                "logging.save_diagnostic_info_comment": "Save logging info",
                "logging.save_xk": true,
                "logging.save_xk_comment": "Save the full vector of trial values ",
                "noise.quit_on_noise_level": true,
                "noise.quit_on_noise_level_comment": "quit/restart if all trial evaluations are within noise level of last iteration",
                "general.check_objfun_for_overflow": false,
                "general.check_objfun_for_overflow_comment": "Presumably check that function behaves itself",
                "slow.history_for_slow": 2,
                "slow.history_for_slow_comment": "No of past successful iterations to look at to decide if slow or not",
                "slow.thresh_for_slow": 0.1,
                "slow.thresh_for_slow_comment": "Log cost function  change for slow converegence",
                "slow.max_slow_iters": 5,
                "slow.max_slow_iters_comment": "The number of itertions (once slow determined) to decide making slow progress",
                "restarts.use_restarts": true,
                "restarts.use_restarts_comment": "Restart when slow convergence or too noisy",
                "restarts.use_soft_restarts": true,
                "restarts.use_soft_restarts_comment": "Use soft restart -- reuse some existing points when  restarting",
                "restarts.soft.num_geom_steps": 3,
                "restarts.soft.num_geom_steps_comment": "How many extra runs to be done when restarting",
                "restarts.increase_npt": false,
                "restarts.increase_npt_comment": "Increase number of points when restarting",
                "restarts.increase_npt_amt_comment": "Number of points to increase by in restarts.increase_npt set when restarting",
                "restarts.max_unsuccessful_restarts": 100,
                "restarts.max_unsuccessful_restarts_comment": "Number of consecutive restarts allowed when no progress made",
                "restarts.hard.increase_ndirs_initial_amt": 1,
                "restarts.hard.increase_ndirs_initial_amt_comment": "How many points to increase by  when doing hard restart (not using any exisiting pts)",
                "restarts.max_npt": null,
                "restarts.max_npt_comment": "Maximum number of points/model evals in each restart",
                "tr_radius.gamma_dec": 0.8,
                "tr_radius.alpha1": 0.9,
                "tr_radius.alpha2": 0.95
            },
            "NamedSettings_comment": "Settings for named parameters that get passed into dfols via user_params"
        },
        "dfols_comment": "Settings for DFOLS algorithm"
    },
    "postProcess": {
        "comment": "Options to control post processing. Details depend on your post processing script.",
        "script": "$OPTCLIMTOP/ECCOv4/postRun/simobs_json_1.sh",
        "script_comment": "Full path name -- including any environment variables you might have -- to postprocessing script",
        "note": "Specify mask_file -- file where l/s mask is, name of mask, start and end times",
        "mask_file": null,
        "mask_file_comment": "Path to mask file. Example value is for N48 HadAM3",
        "mask_name": null,
        "mask_name_comment": "Name of mask variable. Depends on file..",
        "start_time": [
            2000,
            3,
            1,
            0,
            0,
            0
        ],
        "start_time_comment": "Start time as YY,MM, DD, Hr, Min, Sec",
        "end_time": [
            2005,
            3,
            1,
            0,
            0,
            0
        ],
        "end_time_comment": "End time as YY,MM, DD, Hr, Min, Sec"
    },
    "targets": {
        "comment": "Observed targets for optimisation. Should include constraint value.",
        "comment_ECCO": "default run values less a bit",
        "dynstat_theta_mean": 3.56,
        "dynstat_salt_mean": 34.7,
        "seaice_area_mean": 0.045
    },
    "simulatedObservations": {
        "comment": "simulated observations -- dummy to be used when there is a model failure and it turns out to be unfixable. Made the netflux very large and the rsr_nhx large. This means that this model has high error..",
        "dynstat_theta_mean": 3.58,
        "dynstat_salt_mean": 34.72,
        "seaice_area_mean": 0.04532
    },
    "standardModel": {
        "SimulatedValues": {
            "comment": "Values from default run -- used for display",
            "dynstat_theta_mean": 3.58,
            "dynstat_salt_mean": 34.72,
            "seaice_area_mean": 0.04532
        }
    },
    "costd": {
        "zd001": 0.021377527731224442,
        "zd002": 0.021377202577882493,
        "zd003": 0.021377474232103278,
        "zd004": 0.02137688575720873,
        "zd005": 0.02137669678643928,
        "zd006": 0.02137714430441511,
        "zd007": 0.02137645676064908,
        "zd008": 0.0213762350351019,
        "zd009": 0.021376181020272646,
        "zd010": 0.02137595269691955,
        "zd011": 0.02137589799781955
    },
    "bestEval": "zd011",
    "parameters": {
        "gravity": {
            "zd001": 9.5,
            "zd002": 9.68,
            "zd003": 9.5,
            "zd004": 9.86,
            "zd005": 9.940498447189992,
            "zd007": 10.101495341569978,
            "zd008": 10.262492235949962,
            "zd009": 10.262492235949962,
            "zd011": 10.442492235949961
        },
        "SEAICE_STRENGTH": {
            "zd001": 25000.0,
            "zd002": 25000.0,
            "zd003": 24100.0,
            "zd004": 25000.0,
            "zd005": 24195.015528100077,
            "zd007": 24597.50776405004,
            "zd008": 25000.0,
            "zd009": 24100.0,
            "zd011": 24100.0
        }
    },
    "simObs": {
        "dynstat_theta_mean": {
            "zd001": 3.5853229987504,
            "zd002": 3.585322105109,
            "zd003": 3.5853229828532,
            "zd004": 3.5853212347545,
            "zd005": 3.5853208381203,
            "zd007": 3.5853200949617,
            "zd008": 3.5853193697832,
            "zd009": 3.5853193548021,
            "zd011": 3.5853185538022
        },
        "dynstat_salt_mean": {
            "zd001": 34.727011455696,
            "zd002": 34.727011506914,
            "zd003": 34.727011470869,
            "zd004": 34.727011556683,
            "zd005": 34.727011592415,
            "zd007": 34.727011629,
            "zd008": 34.727011664545,
            "zd009": 34.727011680194,
            "zd011": 34.727011726482
        },
        "seaice_area_mean": {
            "zd001": 0.04535081500565,
            "zd002": 0.045351933589119,
            "zd003": 0.045340873205896,
            "zd004": 0.045353001556441,
            "zd005": 0.045344279812851,
            "zd007": 0.045351284523607,
            "zd008": 0.045360229257142,
            "zd009": 0.045350357726926,
            "zd011": 0.045352861823634
        }
    },
    "DFOLS_information": {
        "__transJacobian_type": "<class 'pandas.core.frame.DataFrame'>",
        "transJacobian": "{\"columns\":[\"gravity\",\"SEAICE_STRENGTH\"],\"index\":[0,1,2],\"data\":[[0.0,0.0],[0.0,0.0],[0.0,0.0]]}",
        "__hessian_type": "<class 'pandas.core.frame.DataFrame'>",
        "hessian": "{\"columns\":[0,1,2],\"index\":[0,1,2],\"data\":[[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0]]}",
        "__diagnostic_info_type": "<class 'pandas.core.frame.DataFrame'>",
        "diagnostic_info": "{\"columns\":[\"xk\",\"fk\",\"rho\",\"delta\",\"interpolation_error\",\"interpolation_condition_number\",\"interpolation_change_J_norm\",\"interpolation_total_residual\",\"poisedness\",\"max_distance_xk\",\"norm_gk\",\"norm_sk\",\"nruns\",\"nf\",\"nx\",\"npt\",\"nsamples\",\"iter_this_run\",\"iters_total\",\"iter_type\",\"ratio\",\"slow_iter\"],\"index\":[],\"data\":[]}"
    }
}